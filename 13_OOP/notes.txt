Object Oriented Programming
  > representation of things in world
  > write class to create an object

  Classes
    > blueprint of objects
    > can contain functions or attributes

  Instance
    > objects that are constructed from a class blueprint

  Encapsulation
    > information hiding
    > hide implementation details inside
    > easy code reuse because related logic are bundled into one unit
    > makes abstraction possible

  Abstraction
    > selective access/exposure of properties or functions inside a class
    > python does not support "private", convention is using _ (underscore) before a variable


__init__ = classes in python has this special method that is called upon object creation
self = refers to instance of current class, does not receive arguments


in python to instantiate a class (other language uses a "new" keyword but python does not):

  obj = Class()


Variable Naming Conventions:

  __(method)__ = dunder methods, special methods that already exists at Python that we override and change it's behavior

  _(variable) = treated as a private variable, can still be accessed publicly but by convention don't access it

  __(variable) = accessed as _(classname)__(variable), called "name mangling"
               = make this method/attribute particular to this class
               = mostly used for inheritance to avoid naming conflicts


class instance methods

    def function(self): ...

class instance attributes

    self.property

class attributes(exists across ALL instances)
  > defined without "self."
  > access via ClassName.Attribute
  > any instance can access the value of this
  > value updated across all instances