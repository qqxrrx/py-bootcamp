lambda
  > just like anonymous functions of javascript
  > one line, mostly used on arguments

map()
  > process each item on the list and create a new list from it

filter()
  > only return items to new list where the compared item from old list evaluates to true

~ most of the time, map() and filter() is not needed if it's possible with list comprehension


Generators
  > like list comprehension but uses () instead of []
  > forward only, once you read the item, you will not see it again
  > more lightweight than lists (need the least memory)
  > if only iterating only once, use generators


Built In Functions:

  .all()
    > return True if ALL statements of iterable are truthy

  .any()
    > return True if ANY statements of iterable are truthy

  .sorted()
    > returns a new sorted list from items in the iteratable

  .max()
    > return highest value in a list

  .min()
    > return lowest value in a list

  .reversed()
    > return a reversed iterator object
    > does NOT sort reverse the value, just reverses elements